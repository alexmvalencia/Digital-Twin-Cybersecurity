#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped, TwistStamped
from sensor_msgs.msg import Imu
from mavros_msgs.msg import State
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy

class DroneBridge(Node):
    def __init__(self):
        super().__init__('ros2_bridge')

        # Define QoS profile (to match MAVROS' reliability settings)
        qos_profile = QoSProfile(
            reliability=QoSReliabilityPolicy.BEST_EFFORT,
            history=QoSHistoryPolicy.KEEP_LAST,
            depth=10
        )

        # **Physical Drone Subscribers (px4_real)**
        self.state_sub = self.create_subscription(State, '/px4_real/mavros/state', self.state_callback, qos_profile)
        self.imu_sub = self.create_subscription(Imu, '/px4_real/mavros/imu/data', self.imu_callback, qos_profile)
        self.pose_sub = self.create_subscription(PoseStamped, '/px4_real/mavros/local_position/pose', self.pose_callback, qos_profile)
        self.velocity_sub = self.create_subscription(TwistStamped, '/px4_real/mavros/local_position/velocity_local', self.velocity_callback, qos_profile)

        # **Simulated Drone Publishers (px4_sim)**
        self.state_pub = self.create_publisher(State, '/px4_sim/mavros/state', qos_profile)
        self.imu_pub = self.create_publisher(Imu, '/px4_sim/mavros/imu/data', qos_profile)
        self.pose_pub = self.create_publisher(PoseStamped, '/px4_sim/mavros/local_position/pose', qos_profile)
        self.velocity_pub = self.create_publisher(TwistStamped, '/px4_sim/mavros/local_position/velocity_local', qos_profile)

    def state_callback(self, msg):
        self.state_pub.publish(msg)

    def imu_callback(self, msg):
        self.imu_pub.publish(msg)

    def pose_callback(self, msg):
        self.pose_pub.publish(msg)

    def velocity_callback(self, msg):
        self.velocity_pub.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = DroneBridge()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
